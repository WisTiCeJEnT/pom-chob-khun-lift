
oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003888  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dcc  08003a14  08003a14  00013a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e0  080047e0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080047e0  080047e0  000147e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047e8  080047e8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e8  080047e8  000147e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ec  080047ec  000147ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080047f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f4  20000014  08004804  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  08004804  00020508  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d847  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d47  00000000  00000000  0002d88b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  0002f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b48  00000000  00000000  00030230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020040  00000000  00000000  00030d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a4b1  00000000  00000000  00050db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c032d  00000000  00000000  0005b269  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b596  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003278  00000000  00000000  0011b614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000014 	.word	0x20000014
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080039fc 	.word	0x080039fc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000018 	.word	0x20000018
 80001c8:	080039fc 	.word	0x080039fc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fcf0 	bl	8000eb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f83f 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f931 	bl	8000740 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 f8bf 	bl	8000660 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f8fd 	bl	80006e0 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ssd1306_Init();
 80004e6:	f000 f9c1 	bl	800086c <ssd1306_Init>
  ssd1306_SetCursor(0, 0);
 80004ea:	2100      	movs	r1, #0
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fb81 	bl	8000bf4 <ssd1306_SetCursor>
  ssd1306_Fill(Black);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f000 fa28 	bl	8000948 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 80004f8:	f000 fa48 	bl	800098c <ssd1306_UpdateScreen>
  int x = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  int num;
  char snum[2];
  while (1)
  {
    /* USER CODE END WHILE */
	num = (x%4) + 1;
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	425a      	negs	r2, r3
 8000504:	f003 0303 	and.w	r3, r3, #3
 8000508:	f002 0203 	and.w	r2, r2, #3
 800050c:	bf58      	it	pl
 800050e:	4253      	negpl	r3, r2
 8000510:	3301      	adds	r3, #1
 8000512:	60bb      	str	r3, [r7, #8]
	itoa(num, snum, 10);
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	220a      	movs	r2, #10
 8000518:	4619      	mov	r1, r3
 800051a:	68b8      	ldr	r0, [r7, #8]
 800051c:	f003 fa26 	bl	800396c <itoa>
	ssd1306_SetCursor(0, 0);
 8000520:	2100      	movs	r1, #0
 8000522:	2000      	movs	r0, #0
 8000524:	f000 fb66 	bl	8000bf4 <ssd1306_SetCursor>
	ssd1306_WriteString(snum, Font_11x18, White);
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <main+0x88>)
 800052a:	1d38      	adds	r0, r7, #4
 800052c:	2301      	movs	r3, #1
 800052e:	ca06      	ldmia	r2, {r1, r2}
 8000530:	f000 fb3a 	bl	8000ba8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000534:	f000 fa2a 	bl	800098c <ssd1306_UpdateScreen>
	x++;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	3301      	adds	r3, #1
 800053c:	60fb      	str	r3, [r7, #12]
	HAL_Delay(1000);
 800053e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000542:	f000 fd29 	bl	8000f98 <HAL_Delay>
	ssd1306_Fill(Black);
 8000546:	2000      	movs	r0, #0
 8000548:	f000 f9fe 	bl	8000948 <ssd1306_Fill>
	ssd1306_UpdateScreen();
 800054c:	f000 fa1e 	bl	800098c <ssd1306_UpdateScreen>
	num = (x%4) + 1;
 8000550:	e7d6      	b.n	8000500 <main+0x34>
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b0ac      	sub	sp, #176	; 0xb0
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fa02 	bl	8003970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2254      	movs	r2, #84	; 0x54
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 f9f4 	bl	8003970 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000588:	f001 fb94 	bl	8001cb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800058c:	4b33      	ldr	r3, [pc, #204]	; (800065c <SystemClock_Config+0x104>)
 800058e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000592:	4a32      	ldr	r2, [pc, #200]	; (800065c <SystemClock_Config+0x104>)
 8000594:	f023 0318 	bic.w	r3, r3, #24
 8000598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800059c:	2314      	movs	r3, #20
 800059e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b0:	2360      	movs	r3, #96	; 0x60
 80005b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005bc:	2301      	movs	r3, #1
 80005be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005c8:	2308      	movs	r3, #8
 80005ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ce:	2307      	movs	r3, #7
 80005d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fbd9 	bl	8001d9c <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005f0:	f000 f8fc 	bl	80007ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f8:	2303      	movs	r3, #3
 80005fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f001 ffe4 	bl	80025dc <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800061a:	f000 f8e7 	bl	80007ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800061e:	2342      	movs	r3, #66	; 0x42
 8000620:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000622:	2300      	movs	r3, #0
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000626:	2300      	movs	r3, #0
 8000628:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4618      	mov	r0, r3
 800062e:	f002 f9d9 	bl	80029e4 <HAL_RCCEx_PeriphCLKConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000638:	f000 f8d8 	bl	80007ec <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000640:	f001 fb56 	bl	8001cf0 <HAL_PWREx_ControlVoltageScaling>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800064a:	f000 f8cf 	bl	80007ec <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800064e:	f002 fbbb 	bl	8002dc8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000652:	bf00      	nop
 8000654:	37b0      	adds	r7, #176	; 0xb0
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40021000 	.word	0x40021000

08000660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_I2C1_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_I2C1_Init+0x74>)
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <MX_I2C1_Init+0x7c>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <MX_I2C1_Init+0x74>)
 800069c:	f000 ff06 	bl	80014ac <HAL_I2C_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006a6:	f000 f8a1 	bl	80007ec <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <MX_I2C1_Init+0x74>)
 80006ae:	f001 fa69 	bl	8001b84 <HAL_I2CEx_ConfigAnalogFilter>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b8:	f000 f898 	bl	80007ec <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_I2C1_Init+0x74>)
 80006c0:	f001 faab 	bl	8001c1a <HAL_I2CEx_ConfigDigitalFilter>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f88f 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000438 	.word	0x20000438
 80006d8:	40005400 	.word	0x40005400
 80006dc:	0010061a 	.word	0x0010061a

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MX_USART2_UART_Init+0x5c>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000724:	f002 fc50 	bl	8002fc8 <HAL_UART_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 f85d 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000484 	.word	0x20000484
 800073c:	40004400 	.word	0x40004400

08000740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b088      	sub	sp, #32
 8000744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
 8000752:	60da      	str	r2, [r3, #12]
 8000754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a1c      	ldr	r2, [pc, #112]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <MX_GPIO_Init+0xa4>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_GPIO_Init+0xa4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2108      	movs	r1, #8
 80007a2:	4811      	ldr	r0, [pc, #68]	; (80007e8 <MX_GPIO_Init+0xa8>)
 80007a4:	f000 fe6a 	bl	800147c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 80007a8:	2301      	movs	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	480b      	ldr	r0, [pc, #44]	; (80007e8 <MX_GPIO_Init+0xa8>)
 80007bc:	f000 fcf4 	bl	80011a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007c0:	2308      	movs	r3, #8
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_GPIO_Init+0xa8>)
 80007d8:	f000 fce6 	bl	80011a8 <HAL_GPIO_Init>

}
 80007dc:	bf00      	nop
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40021000 	.word	0x40021000
 80007e8:	48000400 	.word	0x48000400

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <ssd1306_Reset>:
#include "ssd1306.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af04      	add	r7, sp, #16
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	2301      	movs	r3, #1
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	2200      	movs	r2, #0
 8000824:	2178      	movs	r1, #120	; 0x78
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <ssd1306_WriteCommand+0x2c>)
 8000828:	f000 fed0 	bl	80015cc <HAL_I2C_Mem_Write>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000438 	.word	0x20000438

08000838 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af04      	add	r7, sp, #16
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	f04f 32ff 	mov.w	r2, #4294967295
 800084a:	9202      	str	r2, [sp, #8]
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2301      	movs	r3, #1
 8000854:	2240      	movs	r2, #64	; 0x40
 8000856:	2178      	movs	r1, #120	; 0x78
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <ssd1306_WriteData+0x30>)
 800085a:	f000 feb7 	bl	80015cc <HAL_I2C_Mem_Write>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000438 	.word	0x20000438

0800086c <ssd1306_Init>:

// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000870:	f7ff ffc3 	bl	80007fa <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000874:	2064      	movs	r0, #100	; 0x64
 8000876:	f000 fb8f 	bl	8000f98 <HAL_Delay>
    
    // Init OLED
    ssd1306_WriteCommand(0xAE); //display off
 800087a:	20ae      	movs	r0, #174	; 0xae
 800087c:	f7ff ffc4 	bl	8000808 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8000880:	2020      	movs	r0, #32
 8000882:	f7ff ffc1 	bl	8000808 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff ffbe 	bl	8000808 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800088c:	20b0      	movs	r0, #176	; 0xb0
 800088e:	f7ff ffbb 	bl	8000808 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000892:	20c8      	movs	r0, #200	; 0xc8
 8000894:	f7ff ffb8 	bl	8000808 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff ffb5 	bl	8000808 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800089e:	2010      	movs	r0, #16
 80008a0:	f7ff ffb2 	bl	8000808 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80008a4:	2040      	movs	r0, #64	; 0x40
 80008a6:	f7ff ffaf 	bl	8000808 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 80008aa:	2081      	movs	r0, #129	; 0x81
 80008ac:	f7ff ffac 	bl	8000808 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xFF);
 80008b0:	20ff      	movs	r0, #255	; 0xff
 80008b2:	f7ff ffa9 	bl	8000808 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80008b6:	20a1      	movs	r0, #161	; 0xa1
 80008b8:	f7ff ffa6 	bl	8000808 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80008bc:	20a6      	movs	r0, #166	; 0xa6
 80008be:	f7ff ffa3 	bl	8000808 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80008c2:	20a8      	movs	r0, #168	; 0xa8
 80008c4:	f7ff ffa0 	bl	8000808 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80008c8:	203f      	movs	r0, #63	; 0x3f
 80008ca:	f7ff ff9d 	bl	8000808 <ssd1306_WriteCommand>
#else
#error "Only 32 or 64 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008ce:	20a4      	movs	r0, #164	; 0xa4
 80008d0:	f7ff ff9a 	bl	8000808 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80008d4:	20d3      	movs	r0, #211	; 0xd3
 80008d6:	f7ff ff97 	bl	8000808 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff ff94 	bl	8000808 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80008e0:	20d5      	movs	r0, #213	; 0xd5
 80008e2:	f7ff ff91 	bl	8000808 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80008e6:	20f0      	movs	r0, #240	; 0xf0
 80008e8:	f7ff ff8e 	bl	8000808 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80008ec:	20d9      	movs	r0, #217	; 0xd9
 80008ee:	f7ff ff8b 	bl	8000808 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80008f2:	2022      	movs	r0, #34	; 0x22
 80008f4:	f7ff ff88 	bl	8000808 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80008f8:	20da      	movs	r0, #218	; 0xda
 80008fa:	f7ff ff85 	bl	8000808 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80008fe:	2012      	movs	r0, #18
 8000900:	f7ff ff82 	bl	8000808 <ssd1306_WriteCommand>
#else
#error "Only 32 or 64 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000904:	20db      	movs	r0, #219	; 0xdb
 8000906:	f7ff ff7f 	bl	8000808 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800090a:	2020      	movs	r0, #32
 800090c:	f7ff ff7c 	bl	8000808 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000910:	208d      	movs	r0, #141	; 0x8d
 8000912:	f7ff ff79 	bl	8000808 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000916:	2014      	movs	r0, #20
 8000918:	f7ff ff76 	bl	8000808 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800091c:	20af      	movs	r0, #175	; 0xaf
 800091e:	f7ff ff73 	bl	8000808 <ssd1306_WriteCommand>

    // Clear screen
    ssd1306_Fill(Black);
 8000922:	2000      	movs	r0, #0
 8000924:	f000 f810 	bl	8000948 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000928:	f000 f830 	bl	800098c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <ssd1306_Init+0xd8>)
 800092e:	2200      	movs	r2, #0
 8000930:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <ssd1306_Init+0xd8>)
 8000934:	2200      	movs	r2, #0
 8000936:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000938:	4b02      	ldr	r3, [pc, #8]	; (8000944 <ssd1306_Init+0xd8>)
 800093a:	2201      	movs	r2, #1
 800093c:	715a      	strb	r2, [r3, #5]
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000430 	.word	0x20000430

08000948 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	e00d      	b.n	8000974 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <ssd1306_Fill+0x1a>
 800095e:	2100      	movs	r1, #0
 8000960:	e000      	b.n	8000964 <ssd1306_Fill+0x1c>
 8000962:	21ff      	movs	r1, #255	; 0xff
 8000964:	4a08      	ldr	r2, [pc, #32]	; (8000988 <ssd1306_Fill+0x40>)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4413      	add	r3, r2
 800096a:	460a      	mov	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3301      	adds	r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800097a:	d3ed      	bcc.n	8000958 <ssd1306_Fill+0x10>
    }
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	20000030 	.word	0x20000030

0800098c <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0; i < 8; i++) {
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	e016      	b.n	80009c6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i);
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	3b50      	subs	r3, #80	; 0x50
 800099c:	b2db      	uxtb	r3, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ff32 	bl	8000808 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f7ff ff2f 	bl	8000808 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 80009aa:	2010      	movs	r0, #16
 80009ac:	f7ff ff2c 	bl	8000808 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	01db      	lsls	r3, r3, #7
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <ssd1306_UpdateScreen+0x48>)
 80009b6:	4413      	add	r3, r2
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ff3c 	bl	8000838 <ssd1306_WriteData>
    for(i = 0; i < 8; i++) {
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	3301      	adds	r3, #1
 80009c4:	71fb      	strb	r3, [r7, #7]
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b07      	cmp	r3, #7
 80009ca:	d9e5      	bls.n	8000998 <ssd1306_UpdateScreen+0xc>
    }
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000030 	.word	0x20000030

080009d8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
 80009e2:	460b      	mov	r3, r1
 80009e4:	71bb      	strb	r3, [r7, #6]
 80009e6:	4613      	mov	r3, r2
 80009e8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db48      	blt.n	8000a84 <ssd1306_DrawPixel+0xac>
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	2b3f      	cmp	r3, #63	; 0x3f
 80009f6:	d845      	bhi.n	8000a84 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80009f8:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <ssd1306_DrawPixel+0xb8>)
 80009fa:	791b      	ldrb	r3, [r3, #4]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d006      	beq.n	8000a0e <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8000a00:	797b      	ldrb	r3, [r7, #5]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bf0c      	ite	eq
 8000a06:	2301      	moveq	r3, #1
 8000a08:	2300      	movne	r3, #0
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8000a0e:	797b      	ldrb	r3, [r7, #5]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d11a      	bne.n	8000a4a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	79bb      	ldrb	r3, [r7, #6]
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	b2d8      	uxtb	r0, r3
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	01db      	lsls	r3, r3, #7
 8000a20:	4413      	add	r3, r2
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <ssd1306_DrawPixel+0xbc>)
 8000a24:	5cd3      	ldrb	r3, [r2, r3]
 8000a26:	b25a      	sxtb	r2, r3
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	2101      	movs	r1, #1
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	b25b      	sxtb	r3, r3
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b259      	sxtb	r1, r3
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	01db      	lsls	r3, r3, #7
 8000a40:	4413      	add	r3, r2
 8000a42:	b2c9      	uxtb	r1, r1
 8000a44:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <ssd1306_DrawPixel+0xbc>)
 8000a46:	54d1      	strb	r1, [r2, r3]
 8000a48:	e01d      	b.n	8000a86 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	b2d8      	uxtb	r0, r3
 8000a52:	4603      	mov	r3, r0
 8000a54:	01db      	lsls	r3, r3, #7
 8000a56:	4413      	add	r3, r2
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <ssd1306_DrawPixel+0xbc>)
 8000a5a:	5cd3      	ldrb	r3, [r2, r3]
 8000a5c:	b25a      	sxtb	r2, r3
 8000a5e:	79bb      	ldrb	r3, [r7, #6]
 8000a60:	f003 0307 	and.w	r3, r3, #7
 8000a64:	2101      	movs	r1, #1
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	b25b      	sxtb	r3, r3
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	b25b      	sxtb	r3, r3
 8000a70:	4013      	ands	r3, r2
 8000a72:	b259      	sxtb	r1, r3
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	4603      	mov	r3, r0
 8000a78:	01db      	lsls	r3, r3, #7
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b2c9      	uxtb	r1, r1
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <ssd1306_DrawPixel+0xbc>)
 8000a80:	54d1      	strb	r1, [r2, r3]
 8000a82:	e000      	b.n	8000a86 <ssd1306_DrawPixel+0xae>
        return;
 8000a84:	bf00      	nop
    }
}
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	20000430 	.word	0x20000430
 8000a94:	20000030 	.word	0x20000030

08000a98 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	1d38      	adds	r0, r7, #4
 8000aa2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4623      	mov	r3, r4
 8000aaa:	73fb      	strb	r3, [r7, #15]
 8000aac:	4613      	mov	r3, r2
 8000aae:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000ab0:	7bfb      	ldrb	r3, [r7, #15]
 8000ab2:	2b1f      	cmp	r3, #31
 8000ab4:	d902      	bls.n	8000abc <ssd1306_WriteChar+0x24>
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	2b7e      	cmp	r3, #126	; 0x7e
 8000aba:	d901      	bls.n	8000ac0 <ssd1306_WriteChar+0x28>
        return 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	e06d      	b.n	8000b9c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ac0:	4b38      	ldr	r3, [pc, #224]	; (8000ba4 <ssd1306_WriteChar+0x10c>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	793b      	ldrb	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2b80      	cmp	r3, #128	; 0x80
 8000acc:	dc06      	bgt.n	8000adc <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000ace:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <ssd1306_WriteChar+0x10c>)
 8000ad0:	885b      	ldrh	r3, [r3, #2]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	797b      	ldrb	r3, [r7, #5]
 8000ad6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ad8:	2b40      	cmp	r3, #64	; 0x40
 8000ada:	dd01      	ble.n	8000ae0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	e05d      	b.n	8000b9c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	e04c      	b.n	8000b80 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	3b20      	subs	r3, #32
 8000aec:	7979      	ldrb	r1, [r7, #5]
 8000aee:	fb01 f303 	mul.w	r3, r1, r3
 8000af2:	4619      	mov	r1, r3
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	440b      	add	r3, r1
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	e034      	b.n	8000b70 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d012      	beq.n	8000b3c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <ssd1306_WriteChar+0x10c>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	4413      	add	r3, r2
 8000b22:	b2d8      	uxtb	r0, r3
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <ssd1306_WriteChar+0x10c>)
 8000b26:	885b      	ldrh	r3, [r3, #2]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4413      	add	r3, r2
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	7bba      	ldrb	r2, [r7, #14]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f7ff ff4f 	bl	80009d8 <ssd1306_DrawPixel>
 8000b3a:	e016      	b.n	8000b6a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <ssd1306_WriteChar+0x10c>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	4413      	add	r3, r2
 8000b48:	b2d8      	uxtb	r0, r3
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <ssd1306_WriteChar+0x10c>)
 8000b4c:	885b      	ldrh	r3, [r3, #2]
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	b2d9      	uxtb	r1, r3
 8000b58:	7bbb      	ldrb	r3, [r7, #14]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf0c      	ite	eq
 8000b5e:	2301      	moveq	r3, #1
 8000b60:	2300      	movne	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	f7ff ff37 	bl	80009d8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	793b      	ldrb	r3, [r7, #4]
 8000b72:	461a      	mov	r2, r3
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d3c5      	bcc.n	8000b06 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	61fb      	str	r3, [r7, #28]
 8000b80:	797b      	ldrb	r3, [r7, #5]
 8000b82:	461a      	mov	r2, r3
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d3ad      	bcc.n	8000ae6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <ssd1306_WriteChar+0x10c>)
 8000b8c:	881a      	ldrh	r2, [r3, #0]
 8000b8e:	793b      	ldrb	r3, [r7, #4]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4413      	add	r3, r2
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <ssd1306_WriteChar+0x10c>)
 8000b98:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3724      	adds	r7, #36	; 0x24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd90      	pop	{r4, r7, pc}
 8000ba4:	20000430 	.word	0x20000430

08000ba8 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	1d38      	adds	r0, r7, #4
 8000bb2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000bb6:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8000bb8:	e012      	b.n	8000be0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	7818      	ldrb	r0, [r3, #0]
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	1d3a      	adds	r2, r7, #4
 8000bc2:	ca06      	ldmia	r2, {r1, r2}
 8000bc4:	f7ff ff68 	bl	8000a98 <ssd1306_WriteChar>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	461a      	mov	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d002      	beq.n	8000bda <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	e008      	b.n	8000bec <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d1e8      	bne.n	8000bba <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	781b      	ldrb	r3, [r3, #0]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	460a      	mov	r2, r1
 8000bfe:	71fb      	strb	r3, [r7, #7]
 8000c00:	4613      	mov	r3, r2
 8000c02:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <ssd1306_SetCursor+0x2c>)
 8000c0a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <ssd1306_SetCursor+0x2c>)
 8000c12:	805a      	strh	r2, [r3, #2]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000430 	.word	0x20000430

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x44>)
 8000c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_MspInit+0x44>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6613      	str	r3, [r2, #96]	; 0x60
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_MspInit+0x44>)
 8000c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x44>)
 8000c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x44>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x44>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_I2C_MspInit+0x7c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d127      	bne.n	8000cde <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_I2C_MspInit+0x80>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	4a16      	ldr	r2, [pc, #88]	; (8000cec <HAL_I2C_MspInit+0x80>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_I2C_MspInit+0x80>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ca6:	23c0      	movs	r3, #192	; 0xc0
 8000ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000caa:	2312      	movs	r3, #18
 8000cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <HAL_I2C_MspInit+0x84>)
 8000cc2:	f000 fa71 	bl	80011a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_I2C_MspInit+0x80>)
 8000cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_I2C_MspInit+0x80>)
 8000ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_I2C_MspInit+0x80>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	48000400 	.word	0x48000400

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <HAL_UART_MspInit+0xa0>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d13a      	bne.n	8000d8c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_UART_MspInit+0xa4>)
 8000d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d1a:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <HAL_UART_MspInit+0xa4>)
 8000d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d20:	6593      	str	r3, [r2, #88]	; 0x58
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <HAL_UART_MspInit+0xa4>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <HAL_UART_MspInit+0xa4>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d32:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_UART_MspInit+0xa4>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0xa4>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d46:	2304      	movs	r3, #4
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d56:	2307      	movs	r3, #7
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d64:	f000 fa20 	bl	80011a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f000 fa0e 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40004400 	.word	0x40004400
 8000d98:	40021000 	.word	0x40021000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 f8b4 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <SystemInit+0x64>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a16      	ldr	r2, [pc, #88]	; (8000e5c <SystemInit+0x64>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <SystemInit+0x68>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <SystemInit+0x68>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <SystemInit+0x68>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <SystemInit+0x68>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <SystemInit+0x68>)
 8000e24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <SystemInit+0x68>)
 8000e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <SystemInit+0x68>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <SystemInit+0x68>)
 8000e3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <SystemInit+0x68>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SystemInit+0x64>)
 8000e4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00
 8000e60:	40021000 	.word	0x40021000

08000e64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000e68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000e6a:	e003      	b.n	8000e74 <LoopCopyDataInit>

08000e6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000e6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000e70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000e72:	3104      	adds	r1, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000e78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000e7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000e7c:	d3f6      	bcc.n	8000e6c <CopyDataInit>
	ldr	r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000e80:	e002      	b.n	8000e88 <LoopFillZerobss>

08000e82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000e82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000e84:	f842 3b04 	str.w	r3, [r2], #4

08000e88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <LoopForever+0x16>)
	cmp	r2, r3
 8000e8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000e8c:	d3f9      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e8e:	f7ff ffb3 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f002 fd2f 	bl	80038f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e96:	f7ff fb19 	bl	80004cc <main>

08000e9a <LoopForever>:

LoopForever:
    b LoopForever
 8000e9a:	e7fe      	b.n	8000e9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e9c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000ea0:	080047f0 	.word	0x080047f0
	ldr	r0, =_sdata
 8000ea4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ea8:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000eac:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000eb0:	20000508 	.word	0x20000508

08000eb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_IRQHandler>

08000eb6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f93d 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f80e 	bl	8000ee8 <HAL_InitTick>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	71fb      	strb	r3, [r7, #7]
 8000ed6:	e001      	b.n	8000edc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed8:	f7ff fea4 	bl	8000c24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000edc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_InitTick+0x68>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d022      	beq.n	8000f42 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <HAL_InitTick+0x6c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_InitTick+0x68>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f93c 	bl	800118e <HAL_SYSTICK_Config>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10f      	bne.n	8000f3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	d809      	bhi.n	8000f36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f22:	2200      	movs	r2, #0
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2a:	f000 f914 	bl	8001156 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_InitTick+0x70>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	e007      	b.n	8000f46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	e004      	b.n	8000f46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e001      	b.n	8000f46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000010 	.word	0x20000010
 8000f54:	20000008 	.word	0x20000008
 8000f58:	2000000c 	.word	0x2000000c

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x1c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <HAL_IncTick+0x20>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	4a03      	ldr	r2, [pc, #12]	; (8000f78 <HAL_IncTick+0x1c>)
 8000f6c:	6013      	str	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	20000504 	.word	0x20000504
 8000f7c:	20000010 	.word	0x20000010

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000504 	.word	0x20000504

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d004      	beq.n	8000fbc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_Delay+0x40>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4413      	add	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fbc:	bf00      	nop
 8000fbe:	f7ff ffdf 	bl	8000f80 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d8f7      	bhi.n	8000fbe <HAL_Delay+0x26>
  {
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000010 	.word	0x20000010

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff47 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff5c 	bl	8001024 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff8e 	bl	8001094 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5d 	bl	8001040 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffb0 	bl	80010fc <SysTick_Config>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b6:	e148      	b.n	800144a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 813a 	beq.w	8001444 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d00b      	beq.n	80011f0 <HAL_GPIO_Init+0x48>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d007      	beq.n	80011f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011e4:	2b11      	cmp	r3, #17
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b12      	cmp	r3, #18
 80011ee:	d130      	bne.n	8001252 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4013      	ands	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68da      	ldr	r2, [r3, #12]
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001226:	2201      	movs	r2, #1
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	4013      	ands	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	f003 0201 	and.w	r2, r3, #1
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0xea>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b12      	cmp	r3, #18
 8001290:	d123      	bne.n	80012da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f003 0307 	and.w	r3, r3, #7
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	6939      	ldr	r1, [r7, #16]
 80012d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43db      	mvns	r3, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0203 	and.w	r2, r3, #3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8094 	beq.w	8001444 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131c:	4b52      	ldr	r3, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x2c0>)
 800131e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001320:	4a51      	ldr	r2, [pc, #324]	; (8001468 <HAL_GPIO_Init+0x2c0>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	6613      	str	r3, [r2, #96]	; 0x60
 8001328:	4b4f      	ldr	r3, [pc, #316]	; (8001468 <HAL_GPIO_Init+0x2c0>)
 800132a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001334:	4a4d      	ldr	r2, [pc, #308]	; (800146c <HAL_GPIO_Init+0x2c4>)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800135e:	d00d      	beq.n	800137c <HAL_GPIO_Init+0x1d4>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a43      	ldr	r2, [pc, #268]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x1d0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a42      	ldr	r2, [pc, #264]	; (8001474 <HAL_GPIO_Init+0x2cc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_GPIO_Init+0x1cc>
 8001370:	2302      	movs	r3, #2
 8001372:	e004      	b.n	800137e <HAL_GPIO_Init+0x1d6>
 8001374:	2307      	movs	r3, #7
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0x1d6>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <HAL_GPIO_Init+0x1d6>
 800137c:	2300      	movs	r3, #0
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	f002 0203 	and.w	r2, r2, #3
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	4093      	lsls	r3, r2
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800138e:	4937      	ldr	r1, [pc, #220]	; (800146c <HAL_GPIO_Init+0x2c4>)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	089b      	lsrs	r3, r3, #2
 8001394:	3302      	adds	r3, #2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800139c:	4b36      	ldr	r3, [pc, #216]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013c0:	4a2d      	ldr	r2, [pc, #180]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013ea:	4a23      	ldr	r2, [pc, #140]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001414:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	f47f aeaf 	bne.w	80011b8 <HAL_GPIO_Init+0x10>
  }
}
 800145a:	bf00      	nop
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	48000400 	.word	0x48000400
 8001474:	48000800 	.word	0x48000800
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
 8001488:	4613      	mov	r3, r2
 800148a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800148c:	787b      	ldrb	r3, [r7, #1]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001492:	887a      	ldrh	r2, [r7, #2]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e081      	b.n	80015c2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d106      	bne.n	80014d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff fbca 	bl	8000c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2224      	movs	r2, #36	; 0x24
 80014dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 0201 	bic.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800150c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	e006      	b.n	8001534 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001532:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d104      	bne.n	8001546 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001544:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001558:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001568:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	ea42 0103 	orr.w	r1, r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	021a      	lsls	r2, r3, #8
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69d9      	ldr	r1, [r3, #28]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1a      	ldr	r2, [r3, #32]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2220      	movs	r2, #32
 80015ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af02      	add	r7, sp, #8
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	4608      	mov	r0, r1
 80015d6:	4611      	mov	r1, r2
 80015d8:	461a      	mov	r2, r3
 80015da:	4603      	mov	r3, r0
 80015dc:	817b      	strh	r3, [r7, #10]
 80015de:	460b      	mov	r3, r1
 80015e0:	813b      	strh	r3, [r7, #8]
 80015e2:	4613      	mov	r3, r2
 80015e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	f040 80f9 	bne.w	80017e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <HAL_I2C_Mem_Write+0x34>
 80015fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d105      	bne.n	800160c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001606:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e0ed      	b.n	80017e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_I2C_Mem_Write+0x4e>
 8001616:	2302      	movs	r3, #2
 8001618:	e0e6      	b.n	80017e8 <HAL_I2C_Mem_Write+0x21c>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001622:	f7ff fcad 	bl	8000f80 <HAL_GetTick>
 8001626:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2319      	movs	r3, #25
 800162e:	2201      	movs	r2, #1
 8001630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 f955 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0d1      	b.n	80017e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2221      	movs	r2, #33	; 0x21
 8001648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6a3a      	ldr	r2, [r7, #32]
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001664:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800166c:	88f8      	ldrh	r0, [r7, #6]
 800166e:	893a      	ldrh	r2, [r7, #8]
 8001670:	8979      	ldrh	r1, [r7, #10]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	4603      	mov	r3, r0
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f8b9 	bl	80017f4 <I2C_RequestMemoryWrite>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0a9      	b.n	80017e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001698:	b29b      	uxth	r3, r3
 800169a:	2bff      	cmp	r3, #255	; 0xff
 800169c:	d90e      	bls.n	80016bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	22ff      	movs	r2, #255	; 0xff
 80016a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	8979      	ldrh	r1, [r7, #10]
 80016ac:	2300      	movs	r3, #0
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 fa37 	bl	8001b28 <I2C_TransferConfig>
 80016ba:	e00f      	b.n	80016dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	8979      	ldrh	r1, [r7, #10]
 80016ce:	2300      	movs	r3, #0
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 fa26 	bl	8001b28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f000 f93f 	bl	8001964 <I2C_WaitOnTXISFlagUntilTimeout>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e07b      	b.n	80017e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	781a      	ldrb	r2, [r3, #0]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800170a:	b29b      	uxth	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001718:	3b01      	subs	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001724:	b29b      	uxth	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d034      	beq.n	8001794 <HAL_I2C_Mem_Write+0x1c8>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	2b00      	cmp	r3, #0
 8001730:	d130      	bne.n	8001794 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001738:	2200      	movs	r2, #0
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 f8d1 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e04d      	b.n	80017e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001750:	b29b      	uxth	r3, r3
 8001752:	2bff      	cmp	r3, #255	; 0xff
 8001754:	d90e      	bls.n	8001774 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	22ff      	movs	r2, #255	; 0xff
 800175a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	b2da      	uxtb	r2, r3
 8001762:	8979      	ldrh	r1, [r7, #10]
 8001764:	2300      	movs	r3, #0
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 f9db 	bl	8001b28 <I2C_TransferConfig>
 8001772:	e00f      	b.n	8001794 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001782:	b2da      	uxtb	r2, r3
 8001784:	8979      	ldrh	r1, [r7, #10]
 8001786:	2300      	movs	r3, #0
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f000 f9ca 	bl	8001b28 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001798:	b29b      	uxth	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d19e      	bne.n	80016dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f91e 	bl	80019e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e01a      	b.n	80017e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2220      	movs	r2, #32
 80017b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6859      	ldr	r1, [r3, #4]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_I2C_Mem_Write+0x224>)
 80017c6:	400b      	ands	r3, r1
 80017c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2220      	movs	r2, #32
 80017ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e000      	b.n	80017e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80017e6:	2302      	movs	r3, #2
  }
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	fe00e800 	.word	0xfe00e800

080017f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4603      	mov	r3, r0
 8001804:	817b      	strh	r3, [r7, #10]
 8001806:	460b      	mov	r3, r1
 8001808:	813b      	strh	r3, [r7, #8]
 800180a:	4613      	mov	r3, r2
 800180c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	8979      	ldrh	r1, [r7, #10]
 8001814:	4b20      	ldr	r3, [pc, #128]	; (8001898 <I2C_RequestMemoryWrite+0xa4>)
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f983 	bl	8001b28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	69b9      	ldr	r1, [r7, #24]
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f89c 	bl	8001964 <I2C_WaitOnTXISFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e02c      	b.n	8001890 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d105      	bne.n	8001848 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800183c:	893b      	ldrh	r3, [r7, #8]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
 8001846:	e015      	b.n	8001874 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001848:	893b      	ldrh	r3, [r7, #8]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	69b9      	ldr	r1, [r7, #24]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f882 	bl	8001964 <I2C_WaitOnTXISFlagUntilTimeout>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e012      	b.n	8001890 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800186a:	893b      	ldrh	r3, [r7, #8]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	2200      	movs	r2, #0
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 f830 	bl	80018e4 <I2C_WaitOnFlagUntilTimeout>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	80002000 	.word	0x80002000

0800189c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d103      	bne.n	80018ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2200      	movs	r2, #0
 80018b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d007      	beq.n	80018d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699a      	ldr	r2, [r3, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	619a      	str	r2, [r3, #24]
  }
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f4:	e022      	b.n	800193c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d01e      	beq.n	800193c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fe:	f7ff fb3f 	bl	8000f80 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d302      	bcc.n	8001914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d113      	bne.n	800193c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	f043 0220 	orr.w	r2, r3, #32
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2220      	movs	r2, #32
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e00f      	b.n	800195c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	4013      	ands	r3, r2
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	429a      	cmp	r2, r3
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	429a      	cmp	r2, r3
 8001958:	d0cd      	beq.n	80018f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001970:	e02c      	b.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	f000 f870 	bl	8001a5c <I2C_IsAcknowledgeFailed>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e02a      	b.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d01e      	beq.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800198e:	f7ff faf7 	bl	8000f80 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	429a      	cmp	r2, r3
 800199c:	d302      	bcc.n	80019a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d113      	bne.n	80019cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e007      	b.n	80019dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d1cb      	bne.n	8001972 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019f0:	e028      	b.n	8001a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f830 	bl	8001a5c <I2C_IsAcknowledgeFailed>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e026      	b.n	8001a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a06:	f7ff fabb 	bl	8000f80 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d302      	bcc.n	8001a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d113      	bne.n	8001a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a20:	f043 0220 	orr.w	r2, r3, #32
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e007      	b.n	8001a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b20      	cmp	r3, #32
 8001a50:	d1cf      	bne.n	80019f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d151      	bne.n	8001b1a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a76:	e022      	b.n	8001abe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7e:	d01e      	beq.n	8001abe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a80:	f7ff fa7e 	bl	8000f80 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d302      	bcc.n	8001a96 <I2C_IsAcknowledgeFailed+0x3a>
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d113      	bne.n	8001abe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f043 0220 	orr.w	r2, r3, #32
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e02e      	b.n	8001b1c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d1d5      	bne.n	8001a78 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2210      	movs	r2, #16
 8001ad2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f7ff fedd 	bl	800189c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <I2C_IsAcknowledgeFailed+0xc8>)
 8001aee:	400b      	ands	r3, r1
 8001af0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f043 0204 	orr.w	r2, r3, #4
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	fe00e800 	.word	0xfe00e800

08001b28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	460b      	mov	r3, r1
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	4613      	mov	r3, r2
 8001b38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	0d5b      	lsrs	r3, r3, #21
 8001b44:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001b48:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <I2C_TransferConfig+0x58>)
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	ea02 0103 	and.w	r1, r2, r3
 8001b52:	897b      	ldrh	r3, [r7, #10]
 8001b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b58:	7a7b      	ldrb	r3, [r7, #9]
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	431a      	orrs	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	03ff63ff 	.word	0x03ff63ff

08001b84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	d138      	bne.n	8001c0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e032      	b.n	8001c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2224      	movs	r2, #36	; 0x24
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 0201 	bic.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6819      	ldr	r1, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e000      	b.n	8001c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c0c:	2302      	movs	r3, #2
  }
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d139      	bne.n	8001ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e033      	b.n	8001ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2224      	movs	r2, #36	; 0x24
 8001c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e000      	b.n	8001ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ca4:	2302      	movs	r3, #2
  }
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	6013      	str	r3, [r2, #0]
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40007000 	.word	0x40007000

08001cd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <HAL_PWREx_GetVoltageRange+0x18>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40007000 	.word	0x40007000

08001cf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cfe:	d130      	bne.n	8001d62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0c:	d038      	beq.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2232      	movs	r2, #50	; 0x32
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0c9b      	lsrs	r3, r3, #18
 8001d30:	3301      	adds	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d34:	e002      	b.n	8001d3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d48:	d102      	bne.n	8001d50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1f2      	bne.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5c:	d110      	bne.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e00f      	b.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6e:	d007      	beq.n	8001d80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d78:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40007000 	.word	0x40007000
 8001d94:	20000008 	.word	0x20000008
 8001d98:	431bde83 	.word	0x431bde83

08001d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f000 bc11 	b.w	80025d2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001db0:	4ba0      	ldr	r3, [pc, #640]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 030c 	and.w	r3, r3, #12
 8001db8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dba:	4b9e      	ldr	r3, [pc, #632]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80e4 	beq.w	8001f9a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_RCC_OscConfig+0x4c>
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	2b0c      	cmp	r3, #12
 8001ddc:	f040 808b 	bne.w	8001ef6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	f040 8087 	bne.w	8001ef6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de8:	4b92      	ldr	r3, [pc, #584]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_OscConfig+0x64>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e3e8      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1a      	ldr	r2, [r3, #32]
 8001e04:	4b8b      	ldr	r3, [pc, #556]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d004      	beq.n	8001e1a <HAL_RCC_OscConfig+0x7e>
 8001e10:	4b88      	ldr	r3, [pc, #544]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e18:	e005      	b.n	8001e26 <HAL_RCC_OscConfig+0x8a>
 8001e1a:	4b86      	ldr	r3, [pc, #536]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d223      	bcs.n	8001e72 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 fd78 	bl	8002924 <RCC_SetFlashLatencyFromMSIRange>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e3c9      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7c      	ldr	r2, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e44:	f043 0308 	orr.w	r3, r3, #8
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b7a      	ldr	r3, [pc, #488]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4977      	ldr	r1, [pc, #476]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e5c:	4b75      	ldr	r3, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	4972      	ldr	r1, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	604b      	str	r3, [r1, #4]
 8001e70:	e025      	b.n	8001ebe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e72:	4b70      	ldr	r3, [pc, #448]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a6f      	ldr	r2, [pc, #444]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b6d      	ldr	r3, [pc, #436]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	496a      	ldr	r1, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e90:	4b68      	ldr	r3, [pc, #416]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	4965      	ldr	r1, [pc, #404]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fd38 	bl	8002924 <RCC_SetFlashLatencyFromMSIRange>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e389      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ebe:	f000 fc6f 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8001ec2:	4601      	mov	r1, r0
 8001ec4:	4b5b      	ldr	r3, [pc, #364]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	4a5a      	ldr	r2, [pc, #360]	; (8002038 <HAL_RCC_OscConfig+0x29c>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	f003 031f 	and.w	r3, r3, #31
 8001ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eda:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x2a0>)
 8001edc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ede:	4b58      	ldr	r3, [pc, #352]	; (8002040 <HAL_RCC_OscConfig+0x2a4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f800 	bl	8000ee8 <HAL_InitTick>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d052      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	e36d      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d032      	beq.n	8001f64 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001efe:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a4c      	ldr	r2, [pc, #304]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f0a:	f7ff f839 	bl	8000f80 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f12:	f7ff f835 	bl	8000f80 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e356      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f24:	4b43      	ldr	r3, [pc, #268]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f30:	4b40      	ldr	r3, [pc, #256]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a3f      	ldr	r2, [pc, #252]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f36:	f043 0308 	orr.w	r3, r3, #8
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b3d      	ldr	r3, [pc, #244]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	493a      	ldr	r1, [pc, #232]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f4e:	4b39      	ldr	r3, [pc, #228]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	021b      	lsls	r3, r3, #8
 8001f5c:	4935      	ldr	r1, [pc, #212]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
 8001f62:	e01a      	b.n	8001f9a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f64:	4b33      	ldr	r3, [pc, #204]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a32      	ldr	r2, [pc, #200]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f6a:	f023 0301 	bic.w	r3, r3, #1
 8001f6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f70:	f7ff f806 	bl	8000f80 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f78:	f7ff f802 	bl	8000f80 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e323      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x1dc>
 8001f96:	e000      	b.n	8001f9a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d073      	beq.n	800208e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d005      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x21c>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b0c      	cmp	r3, #12
 8001fb0:	d10e      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d063      	beq.n	800208c <HAL_RCC_OscConfig+0x2f0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d15f      	bne.n	800208c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e300      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x24c>
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a15      	ldr	r2, [pc, #84]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0x288>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x270>
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0x288>
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a08      	ldr	r2, [pc, #32]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a05      	ldr	r2, [pc, #20]	; (8002034 <HAL_RCC_OscConfig+0x298>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe ffa8 	bl	8000f80 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002032:	e010      	b.n	8002056 <HAL_RCC_OscConfig+0x2ba>
 8002034:	40021000 	.word	0x40021000
 8002038:	08004770 	.word	0x08004770
 800203c:	20000008 	.word	0x20000008
 8002040:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002044:	f7fe ff9c 	bl	8000f80 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e2bd      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002056:	4baf      	ldr	r3, [pc, #700]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x2a8>
 8002062:	e014      	b.n	800208e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7fe ff8c 	bl	8000f80 <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7fe ff88 	bl	8000f80 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e2a9      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800207e:	4ba5      	ldr	r3, [pc, #660]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x2d0>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d060      	beq.n	800215c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d005      	beq.n	80020ac <HAL_RCC_OscConfig+0x310>
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	2b0c      	cmp	r3, #12
 80020a4:	d119      	bne.n	80020da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d116      	bne.n	80020da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ac:	4b99      	ldr	r3, [pc, #612]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_OscConfig+0x328>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e286      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c4:	4b93      	ldr	r3, [pc, #588]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	4990      	ldr	r1, [pc, #576]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d8:	e040      	b.n	800215c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d023      	beq.n	800212a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e2:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a8b      	ldr	r2, [pc, #556]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe ff47 	bl	8000f80 <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f6:	f7fe ff43 	bl	8000f80 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e264      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002108:	4b82      	ldr	r3, [pc, #520]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b7f      	ldr	r3, [pc, #508]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	497c      	ldr	r1, [pc, #496]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
 8002128:	e018      	b.n	800215c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800212a:	4b7a      	ldr	r3, [pc, #488]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a79      	ldr	r2, [pc, #484]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002130:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7fe ff23 	bl	8000f80 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800213e:	f7fe ff1f 	bl	8000f80 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e240      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002150:	4b70      	ldr	r3, [pc, #448]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1f0      	bne.n	800213e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d03c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01c      	beq.n	80021aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002170:	4b68      	ldr	r3, [pc, #416]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002176:	4a67      	ldr	r2, [pc, #412]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe fefe 	bl	8000f80 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe fefa 	bl	8000f80 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e21b      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800219a:	4b5e      	ldr	r3, [pc, #376]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 800219c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ef      	beq.n	8002188 <HAL_RCC_OscConfig+0x3ec>
 80021a8:	e01b      	b.n	80021e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021aa:	4b5a      	ldr	r3, [pc, #360]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80021ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b0:	4a58      	ldr	r2, [pc, #352]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80021b2:	f023 0301 	bic.w	r3, r3, #1
 80021b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7fe fee1 	bl	8000f80 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021c0:	e008      	b.n	80021d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c2:	f7fe fedd 	bl	8000f80 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e1fe      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021d4:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1ef      	bne.n	80021c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 80a6 	beq.w	800233c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f0:	2300      	movs	r3, #0
 80021f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021f4:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10d      	bne.n	800221c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002200:	4b44      	ldr	r3, [pc, #272]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	4a43      	ldr	r2, [pc, #268]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220a:	6593      	str	r3, [r2, #88]	; 0x58
 800220c:	4b41      	ldr	r3, [pc, #260]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002218:	2301      	movs	r3, #1
 800221a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221c:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <HAL_RCC_OscConfig+0x57c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d118      	bne.n	800225a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002228:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <HAL_RCC_OscConfig+0x57c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a3a      	ldr	r2, [pc, #232]	; (8002318 <HAL_RCC_OscConfig+0x57c>)
 800222e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002234:	f7fe fea4 	bl	8000f80 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223c:	f7fe fea0 	bl	8000f80 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1c1      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800224e:	4b32      	ldr	r3, [pc, #200]	; (8002318 <HAL_RCC_OscConfig+0x57c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d108      	bne.n	8002274 <HAL_RCC_OscConfig+0x4d8>
 8002262:	4b2c      	ldr	r3, [pc, #176]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	4a2a      	ldr	r2, [pc, #168]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002272:	e024      	b.n	80022be <HAL_RCC_OscConfig+0x522>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b05      	cmp	r3, #5
 800227a:	d110      	bne.n	800229e <HAL_RCC_OscConfig+0x502>
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 800227e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002282:	4a24      	ldr	r2, [pc, #144]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	4a20      	ldr	r2, [pc, #128]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800229c:	e00f      	b.n	80022be <HAL_RCC_OscConfig+0x522>
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	4a1b      	ldr	r2, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	4a17      	ldr	r2, [pc, #92]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80022b6:	f023 0304 	bic.w	r3, r3, #4
 80022ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d016      	beq.n	80022f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe fe5b 	bl	8000f80 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe fe57 	bl	8000f80 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e176      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_OscConfig+0x578>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0ed      	beq.n	80022ce <HAL_RCC_OscConfig+0x532>
 80022f2:	e01a      	b.n	800232a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f4:	f7fe fe44 	bl	8000f80 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022fa:	e00f      	b.n	800231c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe fe40 	bl	8000f80 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d906      	bls.n	800231c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e15f      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800231c:	4baa      	ldr	r3, [pc, #680]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e8      	bne.n	80022fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800232a:	7ffb      	ldrb	r3, [r7, #31]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d105      	bne.n	800233c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002330:	4ba5      	ldr	r3, [pc, #660]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002334:	4aa4      	ldr	r2, [pc, #656]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d03c      	beq.n	80023c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01c      	beq.n	800238a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002350:	4b9d      	ldr	r3, [pc, #628]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002352:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002356:	4a9c      	ldr	r2, [pc, #624]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7fe fe0e 	bl	8000f80 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002368:	f7fe fe0a 	bl	8000f80 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e12b      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800237a:	4b93      	ldr	r3, [pc, #588]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 800237c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ef      	beq.n	8002368 <HAL_RCC_OscConfig+0x5cc>
 8002388:	e01b      	b.n	80023c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800238a:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 800238c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002390:	4a8d      	ldr	r2, [pc, #564]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239a:	f7fe fdf1 	bl	8000f80 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023a2:	f7fe fded 	bl	8000f80 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e10e      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b4:	4b84      	ldr	r3, [pc, #528]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 80023b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1ef      	bne.n	80023a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8102 	beq.w	80025d0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	f040 80c5 	bne.w	8002560 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023d6:	4b7c      	ldr	r3, [pc, #496]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f003 0203 	and.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d12c      	bne.n	8002444 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f4:	3b01      	subs	r3, #1
 80023f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d123      	bne.n	8002444 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002406:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d11b      	bne.n	8002444 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d113      	bne.n	8002444 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	3b01      	subs	r3, #1
 800242a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d109      	bne.n	8002444 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	3b01      	subs	r3, #1
 800243e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002440:	429a      	cmp	r2, r3
 8002442:	d067      	beq.n	8002514 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d062      	beq.n	8002510 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800244a:	4b5f      	ldr	r3, [pc, #380]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e0bb      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800245a:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a5a      	ldr	r2, [pc, #360]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002460:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002464:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002466:	f7fe fd8b 	bl	8000f80 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246e:	f7fe fd87 	bl	8000f80 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0a8      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002480:	4b51      	ldr	r3, [pc, #324]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248c:	4b4e      	ldr	r3, [pc, #312]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	4b4e      	ldr	r3, [pc, #312]	; (80025cc <HAL_RCC_OscConfig+0x830>)
 8002492:	4013      	ands	r3, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800249c:	3a01      	subs	r2, #1
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	4311      	orrs	r1, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024a6:	0212      	lsls	r2, r2, #8
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ae:	0852      	lsrs	r2, r2, #1
 80024b0:	3a01      	subs	r2, #1
 80024b2:	0552      	lsls	r2, r2, #21
 80024b4:	4311      	orrs	r1, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024ba:	0852      	lsrs	r2, r2, #1
 80024bc:	3a01      	subs	r2, #1
 80024be:	0652      	lsls	r2, r2, #25
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024c6:	06d2      	lsls	r2, r2, #27
 80024c8:	430a      	orrs	r2, r1
 80024ca:	493f      	ldr	r1, [pc, #252]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024d0:	4b3d      	ldr	r3, [pc, #244]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a3c      	ldr	r2, [pc, #240]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024dc:	4b3a      	ldr	r3, [pc, #232]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a39      	ldr	r2, [pc, #228]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e8:	f7fe fd4a 	bl	8000f80 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fd46 	bl	8000f80 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e067      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002502:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800250e:	e05f      	b.n	80025d0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e05e      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d157      	bne.n	80025d0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002520:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a28      	ldr	r2, [pc, #160]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800252c:	4b26      	ldr	r3, [pc, #152]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a25      	ldr	r2, [pc, #148]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002536:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002538:	f7fe fd22 	bl	8000f80 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fd1e 	bl	8000f80 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e03f      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x7a4>
 800255e:	e037      	b.n	80025d0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d02d      	beq.n	80025c2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 800256c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002570:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002584:	f023 0303 	bic.w	r3, r3, #3
 8002588:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 8002590:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002598:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7fe fcf1 	bl	8000f80 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a2:	f7fe fced 	bl	8000f80 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e00e      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <HAL_RCC_OscConfig+0x82c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f0      	bne.n	80025a2 <HAL_RCC_OscConfig+0x806>
 80025c0:	e006      	b.n	80025d0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e005      	b.n	80025d2 <HAL_RCC_OscConfig+0x836>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3720      	adds	r7, #32
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop

080025dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0c8      	b.n	8002782 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025f0:	4b66      	ldr	r3, [pc, #408]	; (800278c <HAL_RCC_ClockConfig+0x1b0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d910      	bls.n	8002620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b63      	ldr	r3, [pc, #396]	; (800278c <HAL_RCC_ClockConfig+0x1b0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 0207 	bic.w	r2, r3, #7
 8002606:	4961      	ldr	r1, [pc, #388]	; (800278c <HAL_RCC_ClockConfig+0x1b0>)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b5f      	ldr	r3, [pc, #380]	; (800278c <HAL_RCC_ClockConfig+0x1b0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0b0      	b.n	8002782 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d04c      	beq.n	80026c6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d107      	bne.n	8002644 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002634:	4b56      	ldr	r3, [pc, #344]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d121      	bne.n	8002684 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e09e      	b.n	8002782 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d107      	bne.n	800265c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264c:	4b50      	ldr	r3, [pc, #320]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d115      	bne.n	8002684 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e092      	b.n	8002782 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002664:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e086      	b.n	8002782 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002674:	4b46      	ldr	r3, [pc, #280]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e07e      	b.n	8002782 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002684:	4b42      	ldr	r3, [pc, #264]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 0203 	bic.w	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	493f      	ldr	r1, [pc, #252]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002696:	f7fe fc73 	bl	8000f80 <HAL_GetTick>
 800269a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269e:	f7fe fc6f 	bl	8000f80 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e066      	b.n	8002782 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b4:	4b36      	ldr	r3, [pc, #216]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 020c 	and.w	r2, r3, #12
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d1eb      	bne.n	800269e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d008      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d2:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	492c      	ldr	r1, [pc, #176]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026e4:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCC_ClockConfig+0x1b0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d210      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <HAL_RCC_ClockConfig+0x1b0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 0207 	bic.w	r2, r3, #7
 80026fa:	4924      	ldr	r1, [pc, #144]	; (800278c <HAL_RCC_ClockConfig+0x1b0>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b22      	ldr	r3, [pc, #136]	; (800278c <HAL_RCC_ClockConfig+0x1b0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e036      	b.n	8002782 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b1b      	ldr	r3, [pc, #108]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4918      	ldr	r1, [pc, #96]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4910      	ldr	r1, [pc, #64]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002752:	f000 f825 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8002756:	4601      	mov	r1, r0
 8002758:	4b0d      	ldr	r3, [pc, #52]	; (8002790 <HAL_RCC_ClockConfig+0x1b4>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	5cd3      	ldrb	r3, [r2, r3]
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	fa21 f303 	lsr.w	r3, r1, r3
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fbb6 	bl	8000ee8 <HAL_InitTick>
 800277c:	4603      	mov	r3, r0
 800277e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002780:	7afb      	ldrb	r3, [r7, #11]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40022000 	.word	0x40022000
 8002790:	40021000 	.word	0x40021000
 8002794:	08004770 	.word	0x08004770
 8002798:	20000008 	.word	0x20000008
 800279c:	2000000c 	.word	0x2000000c

080027a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b089      	sub	sp, #36	; 0x24
 80027a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ae:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b8:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x34>
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d121      	bne.n	8002812 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d11e      	bne.n	8002812 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027d4:	4b33      	ldr	r3, [pc, #204]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d107      	bne.n	80027f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80027e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	61fb      	str	r3, [r7, #28]
 80027ee:	e005      	b.n	80027fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80027f0:	4b2c      	ldr	r3, [pc, #176]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x104>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	091b      	lsrs	r3, r3, #4
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80027fc:	4a2a      	ldr	r2, [pc, #168]	; (80028a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002804:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10d      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d102      	bne.n	800281e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002818:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_RCC_GetSysClockFreq+0x10c>)
 800281a:	61bb      	str	r3, [r7, #24]
 800281c:	e004      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d101      	bne.n	8002828 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002824:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002826:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b0c      	cmp	r3, #12
 800282c:	d133      	bne.n	8002896 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d002      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0xa4>
 800283e:	2b03      	cmp	r3, #3
 8002840:	d003      	beq.n	800284a <HAL_RCC_GetSysClockFreq+0xaa>
 8002842:	e005      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_GetSysClockFreq+0x10c>)
 8002846:	617b      	str	r3, [r7, #20]
      break;
 8002848:	e005      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800284c:	617b      	str	r3, [r7, #20]
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	617b      	str	r3, [r7, #20]
      break;
 8002854:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	3301      	adds	r3, #1
 8002862:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x104>)
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	0a1b      	lsrs	r3, r3, #8
 800286a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	fb02 f203 	mul.w	r2, r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_GetSysClockFreq+0x104>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0e5b      	lsrs	r3, r3, #25
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	3301      	adds	r3, #1
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002896:	69bb      	ldr	r3, [r7, #24]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3724      	adds	r7, #36	; 0x24
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	40021000 	.word	0x40021000
 80028a8:	08004788 	.word	0x08004788
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	007a1200 	.word	0x007a1200

080028b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000008 	.word	0x20000008

080028cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028d0:	f7ff fff0 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028d4:	4601      	mov	r1, r0
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0a1b      	lsrs	r3, r3, #8
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	08004780 	.word	0x08004780

080028f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028fc:	f7ff ffda 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 8002900:	4601      	mov	r1, r0
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	0adb      	lsrs	r3, r3, #11
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x28>)
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002918:	4618      	mov	r0, r3
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40021000 	.word	0x40021000
 8002920:	08004780 	.word	0x08004780

08002924 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002930:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800293c:	f7ff f9ca 	bl	8001cd4 <HAL_PWREx_GetVoltageRange>
 8002940:	6178      	str	r0, [r7, #20]
 8002942:	e014      	b.n	800296e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002944:	4b25      	ldr	r3, [pc, #148]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002948:	4a24      	ldr	r2, [pc, #144]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800294a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294e:	6593      	str	r3, [r2, #88]	; 0x58
 8002950:	4b22      	ldr	r3, [pc, #136]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800295c:	f7ff f9ba 	bl	8001cd4 <HAL_PWREx_GetVoltageRange>
 8002960:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002968:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800296c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002974:	d10b      	bne.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d919      	bls.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2ba0      	cmp	r3, #160	; 0xa0
 8002980:	d902      	bls.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002982:	2302      	movs	r3, #2
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	e013      	b.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002988:	2301      	movs	r3, #1
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	e010      	b.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b80      	cmp	r3, #128	; 0x80
 8002992:	d902      	bls.n	800299a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002994:	2303      	movs	r3, #3
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	e00a      	b.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d102      	bne.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a0:	2302      	movs	r3, #2
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	e004      	b.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b70      	cmp	r3, #112	; 0x70
 80029aa:	d101      	bne.n	80029b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029ac:	2301      	movs	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 0207 	bic.w	r2, r3, #7
 80029b8:	4909      	ldr	r1, [pc, #36]	; (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	40022000 	.word	0x40022000

080029e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029ec:	2300      	movs	r3, #0
 80029ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029f0:	2300      	movs	r3, #0
 80029f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d02f      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a08:	d005      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002a0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a0e:	d015      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d007      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002a14:	e00f      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a16:	4bac      	ldr	r3, [pc, #688]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	4aab      	ldr	r2, [pc, #684]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a22:	e00c      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3304      	adds	r3, #4
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f9dc 	bl	8002de8 <RCCEx_PLLSAI1_Config>
 8002a30:	4603      	mov	r3, r0
 8002a32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a34:	e003      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	74fb      	strb	r3, [r7, #19]
      break;
 8002a3a:	e000      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8002a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a44:	4ba0      	ldr	r3, [pc, #640]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	499d      	ldr	r1, [pc, #628]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a5a:	e001      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a5c:	7cfb      	ldrb	r3, [r7, #19]
 8002a5e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8099 	beq.w	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a72:	4b95      	ldr	r3, [pc, #596]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002a82:	2300      	movs	r3, #0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00d      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a88:	4b8f      	ldr	r3, [pc, #572]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	4a8e      	ldr	r2, [pc, #568]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a92:	6593      	str	r3, [r2, #88]	; 0x58
 8002a94:	4b8c      	ldr	r3, [pc, #560]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa4:	4b89      	ldr	r3, [pc, #548]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a88      	ldr	r2, [pc, #544]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fa66 	bl	8000f80 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ab6:	e009      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab8:	f7fe fa62 	bl	8000f80 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d902      	bls.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	74fb      	strb	r3, [r7, #19]
        break;
 8002aca:	e005      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002acc:	4b7f      	ldr	r3, [pc, #508]	; (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ef      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d155      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ade:	4b7a      	ldr	r3, [pc, #488]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d01e      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d019      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002afa:	4b73      	ldr	r3, [pc, #460]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b04:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b06:	4b70      	ldr	r3, [pc, #448]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	4a6e      	ldr	r2, [pc, #440]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b16:	4b6c      	ldr	r3, [pc, #432]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	4a6a      	ldr	r2, [pc, #424]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b26:	4a68      	ldr	r2, [pc, #416]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d016      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fa22 	bl	8000f80 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b40:	f7fe fa1e 	bl	8000f80 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d902      	bls.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	74fb      	strb	r3, [r7, #19]
            break;
 8002b56:	e006      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b58:	4b5b      	ldr	r3, [pc, #364]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ec      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b6c:	4b56      	ldr	r3, [pc, #344]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7a:	4953      	ldr	r1, [pc, #332]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b82:	e004      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
 8002b88:	e001      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b8e:	7c7b      	ldrb	r3, [r7, #17]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d105      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	4b4c      	ldr	r3, [pc, #304]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	4a4b      	ldr	r2, [pc, #300]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4943      	ldr	r1, [pc, #268]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bce:	4b3e      	ldr	r3, [pc, #248]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f023 020c 	bic.w	r2, r3, #12
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	493a      	ldr	r1, [pc, #232]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bf0:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	4932      	ldr	r1, [pc, #200]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	4929      	ldr	r1, [pc, #164]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	4921      	ldr	r1, [pc, #132]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c56:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c64:	4918      	ldr	r1, [pc, #96]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4910      	ldr	r1, [pc, #64]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d02c      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	4907      	ldr	r1, [pc, #28]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb8:	d10a      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cba:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	4a02      	ldr	r2, [pc, #8]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc4:	60d3      	str	r3, [r2, #12]
 8002cc6:	e015      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002cc8:	40021000 	.word	0x40021000
 8002ccc:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2101      	movs	r1, #1
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f881 	bl	8002de8 <RCCEx_PLLSAI1_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cea:	7cfb      	ldrb	r3, [r7, #19]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 8002cf0:	7cfb      	ldrb	r3, [r7, #19]
 8002cf2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d028      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d00:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	492d      	ldr	r1, [pc, #180]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a27      	ldr	r2, [pc, #156]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d2a:	60d3      	str	r3, [r2, #12]
 8002d2c:	e011      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d36:	d10c      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f852 	bl	8002de8 <RCCEx_PLLSAI1_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d01c      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6c:	4915      	ldr	r1, [pc, #84]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	2102      	movs	r1, #2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 f82f 	bl	8002de8 <RCCEx_PLLSAI1_Config>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 8002d94:	7cfb      	ldrb	r3, [r7, #19]
 8002d96:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002daa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002dba:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002dd2:	f043 0304 	orr.w	r3, r3, #4
 8002dd6:	6013      	str	r3, [r2, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000

08002de8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002df6:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d018      	beq.n	8002e34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e02:	4b70      	ldr	r3, [pc, #448]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0203 	and.w	r2, r3, #3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d10d      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
       ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e1a:	4b6a      	ldr	r3, [pc, #424]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	091b      	lsrs	r3, r3, #4
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
       ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d044      	beq.n	8002eb8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e041      	b.n	8002eb8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d00c      	beq.n	8002e56 <RCCEx_PLLSAI1_Config+0x6e>
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d013      	beq.n	8002e68 <RCCEx_PLLSAI1_Config+0x80>
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d120      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e44:	4b5f      	ldr	r3, [pc, #380]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d11d      	bne.n	8002e8c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e54:	e01a      	b.n	8002e8c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e56:	4b5b      	ldr	r3, [pc, #364]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d116      	bne.n	8002e90 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e66:	e013      	b.n	8002e90 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e68:	4b56      	ldr	r3, [pc, #344]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10f      	bne.n	8002e94 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e74:	4b53      	ldr	r3, [pc, #332]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e84:	e006      	b.n	8002e94 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8a:	e004      	b.n	8002e96 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e8c:	bf00      	nop
 8002e8e:	e002      	b.n	8002e96 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e90:	bf00      	nop
 8002e92:	e000      	b.n	8002e96 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e94:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10d      	bne.n	8002eb8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e9c:	4b49      	ldr	r3, [pc, #292]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	3b01      	subs	r3, #1
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	4944      	ldr	r1, [pc, #272]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d17c      	bne.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ebe:	4b41      	ldr	r3, [pc, #260]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a40      	ldr	r2, [pc, #256]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ec4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eca:	f7fe f859 	bl	8000f80 <HAL_GetTick>
 8002ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ed0:	e009      	b.n	8002ee6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ed2:	f7fe f855 	bl	8000f80 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d902      	bls.n	8002ee6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	73fb      	strb	r3, [r7, #15]
        break;
 8002ee4:	e005      	b.n	8002ef2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ee6:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ef      	bne.n	8002ed2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d15f      	bne.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d110      	bne.n	8002f20 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002efe:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f06:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6892      	ldr	r2, [r2, #8]
 8002f0e:	0211      	lsls	r1, r2, #8
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68d2      	ldr	r2, [r2, #12]
 8002f14:	06d2      	lsls	r2, r2, #27
 8002f16:	430a      	orrs	r2, r1
 8002f18:	492a      	ldr	r1, [pc, #168]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	610b      	str	r3, [r1, #16]
 8002f1e:	e027      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d112      	bne.n	8002f4c <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f26:	4b27      	ldr	r3, [pc, #156]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6892      	ldr	r2, [r2, #8]
 8002f36:	0211      	lsls	r1, r2, #8
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6912      	ldr	r2, [r2, #16]
 8002f3c:	0852      	lsrs	r2, r2, #1
 8002f3e:	3a01      	subs	r2, #1
 8002f40:	0552      	lsls	r2, r2, #21
 8002f42:	430a      	orrs	r2, r1
 8002f44:	491f      	ldr	r1, [pc, #124]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	610b      	str	r3, [r1, #16]
 8002f4a:	e011      	b.n	8002f70 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6892      	ldr	r2, [r2, #8]
 8002f5c:	0211      	lsls	r1, r2, #8
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6952      	ldr	r2, [r2, #20]
 8002f62:	0852      	lsrs	r2, r2, #1
 8002f64:	3a01      	subs	r2, #1
 8002f66:	0652      	lsls	r2, r2, #25
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	4916      	ldr	r1, [pc, #88]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe f800 	bl	8000f80 <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f82:	e009      	b.n	8002f98 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f84:	f7fd fffc 	bl	8000f80 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d902      	bls.n	8002f98 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	73fb      	strb	r3, [r7, #15]
          break;
 8002f96:	e005      	b.n	8002fa4 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f98:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ef      	beq.n	8002f84 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002faa:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e040      	b.n	800305c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fe82 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	; 0x24
 8002ff4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f82c 	bl	8003064 <UART_SetConfig>
 800300c:	4603      	mov	r3, r0
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e022      	b.n	800305c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fb06 	bl	8003630 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fb8d 	bl	8003774 <UART_CheckIdleState>
 800305a:	4603      	mov	r3, r0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003064:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003068:	b08a      	sub	sp, #40	; 0x28
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689a      	ldr	r2, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	4313      	orrs	r3, r2
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4bb3      	ldr	r3, [pc, #716]	; (8003368 <UART_SetConfig+0x304>)
 800309a:	4013      	ands	r3, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a2:	430b      	orrs	r3, r1
 80030a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68da      	ldr	r2, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4aa9      	ldr	r2, [pc, #676]	; (800336c <UART_SetConfig+0x308>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	4313      	orrs	r3, r2
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	430a      	orrs	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4aa0      	ldr	r2, [pc, #640]	; (8003370 <UART_SetConfig+0x30c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d126      	bne.n	8003142 <UART_SetConfig+0xde>
 80030f4:	4b9f      	ldr	r3, [pc, #636]	; (8003374 <UART_SetConfig+0x310>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d81a      	bhi.n	8003138 <UART_SetConfig+0xd4>
 8003102:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <UART_SetConfig+0xa4>)
 8003104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003108:	08003119 	.word	0x08003119
 800310c:	08003129 	.word	0x08003129
 8003110:	08003121 	.word	0x08003121
 8003114:	08003131 	.word	0x08003131
 8003118:	2301      	movs	r3, #1
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e080      	b.n	8003222 <UART_SetConfig+0x1be>
 8003120:	2302      	movs	r3, #2
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e07c      	b.n	8003222 <UART_SetConfig+0x1be>
 8003128:	2304      	movs	r3, #4
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e078      	b.n	8003222 <UART_SetConfig+0x1be>
 8003130:	2308      	movs	r3, #8
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e074      	b.n	8003222 <UART_SetConfig+0x1be>
 8003138:	2310      	movs	r3, #16
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313e:	bf00      	nop
 8003140:	e06f      	b.n	8003222 <UART_SetConfig+0x1be>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a8c      	ldr	r2, [pc, #560]	; (8003378 <UART_SetConfig+0x314>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d138      	bne.n	80031be <UART_SetConfig+0x15a>
 800314c:	4b89      	ldr	r3, [pc, #548]	; (8003374 <UART_SetConfig+0x310>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b0c      	cmp	r3, #12
 8003158:	d82c      	bhi.n	80031b4 <UART_SetConfig+0x150>
 800315a:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <UART_SetConfig+0xfc>)
 800315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003160:	08003195 	.word	0x08003195
 8003164:	080031b5 	.word	0x080031b5
 8003168:	080031b5 	.word	0x080031b5
 800316c:	080031b5 	.word	0x080031b5
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080031b5 	.word	0x080031b5
 8003178:	080031b5 	.word	0x080031b5
 800317c:	080031b5 	.word	0x080031b5
 8003180:	0800319d 	.word	0x0800319d
 8003184:	080031b5 	.word	0x080031b5
 8003188:	080031b5 	.word	0x080031b5
 800318c:	080031b5 	.word	0x080031b5
 8003190:	080031ad 	.word	0x080031ad
 8003194:	2300      	movs	r3, #0
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319a:	e042      	b.n	8003222 <UART_SetConfig+0x1be>
 800319c:	2302      	movs	r3, #2
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a2:	e03e      	b.n	8003222 <UART_SetConfig+0x1be>
 80031a4:	2304      	movs	r3, #4
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031aa:	e03a      	b.n	8003222 <UART_SetConfig+0x1be>
 80031ac:	2308      	movs	r3, #8
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b2:	e036      	b.n	8003222 <UART_SetConfig+0x1be>
 80031b4:	2310      	movs	r3, #16
 80031b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ba:	bf00      	nop
 80031bc:	e031      	b.n	8003222 <UART_SetConfig+0x1be>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6a      	ldr	r2, [pc, #424]	; (800336c <UART_SetConfig+0x308>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d129      	bne.n	800321c <UART_SetConfig+0x1b8>
 80031c8:	4b6a      	ldr	r3, [pc, #424]	; (8003374 <UART_SetConfig+0x310>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d6:	d014      	beq.n	8003202 <UART_SetConfig+0x19e>
 80031d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031dc:	d802      	bhi.n	80031e4 <UART_SetConfig+0x180>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <UART_SetConfig+0x18e>
 80031e2:	e016      	b.n	8003212 <UART_SetConfig+0x1ae>
 80031e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e8:	d007      	beq.n	80031fa <UART_SetConfig+0x196>
 80031ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031ee:	d00c      	beq.n	800320a <UART_SetConfig+0x1a6>
 80031f0:	e00f      	b.n	8003212 <UART_SetConfig+0x1ae>
 80031f2:	2300      	movs	r3, #0
 80031f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f8:	e013      	b.n	8003222 <UART_SetConfig+0x1be>
 80031fa:	2302      	movs	r3, #2
 80031fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003200:	e00f      	b.n	8003222 <UART_SetConfig+0x1be>
 8003202:	2304      	movs	r3, #4
 8003204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003208:	e00b      	b.n	8003222 <UART_SetConfig+0x1be>
 800320a:	2308      	movs	r3, #8
 800320c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003210:	e007      	b.n	8003222 <UART_SetConfig+0x1be>
 8003212:	2310      	movs	r3, #16
 8003214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003218:	bf00      	nop
 800321a:	e002      	b.n	8003222 <UART_SetConfig+0x1be>
 800321c:	2310      	movs	r3, #16
 800321e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a51      	ldr	r2, [pc, #324]	; (800336c <UART_SetConfig+0x308>)
 8003228:	4293      	cmp	r3, r2
 800322a:	f040 80fa 	bne.w	8003422 <UART_SetConfig+0x3be>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800322e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003232:	2b08      	cmp	r3, #8
 8003234:	d823      	bhi.n	800327e <UART_SetConfig+0x21a>
 8003236:	a201      	add	r2, pc, #4	; (adr r2, 800323c <UART_SetConfig+0x1d8>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	08003261 	.word	0x08003261
 8003240:	0800327f 	.word	0x0800327f
 8003244:	08003269 	.word	0x08003269
 8003248:	0800327f 	.word	0x0800327f
 800324c:	0800326f 	.word	0x0800326f
 8003250:	0800327f 	.word	0x0800327f
 8003254:	0800327f 	.word	0x0800327f
 8003258:	0800327f 	.word	0x0800327f
 800325c:	08003277 	.word	0x08003277
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003260:	f7ff fb34 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8003264:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003266:	e00d      	b.n	8003284 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003268:	4b44      	ldr	r3, [pc, #272]	; (800337c <UART_SetConfig+0x318>)
 800326a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800326c:	e00a      	b.n	8003284 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800326e:	f7ff fa97 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8003272:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003274:	e006      	b.n	8003284 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800327c:	e002      	b.n	8003284 <UART_SetConfig+0x220>
      default:
        ret = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	76fb      	strb	r3, [r7, #27]
        break;
 8003282:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 81c6 	beq.w	8003618 <UART_SetConfig+0x5b4>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	429a      	cmp	r2, r3
 800329a:	d305      	bcc.n	80032a8 <UART_SetConfig+0x244>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d902      	bls.n	80032ae <UART_SetConfig+0x24a>
      {
        ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	76fb      	strb	r3, [r7, #27]
 80032ac:	e1b4      	b.n	8003618 <UART_SetConfig+0x5b4>
      }
      else
      {
        switch (clocksource)
 80032ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	f200 80a2 	bhi.w	80033fc <UART_SetConfig+0x398>
 80032b8:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <UART_SetConfig+0x25c>)
 80032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032be:	bf00      	nop
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	080033fd 	.word	0x080033fd
 80032c8:	08003333 	.word	0x08003333
 80032cc:	080033fd 	.word	0x080033fd
 80032d0:	08003385 	.word	0x08003385
 80032d4:	080033fd 	.word	0x080033fd
 80032d8:	080033fd 	.word	0x080033fd
 80032dc:	080033fd 	.word	0x080033fd
 80032e0:	080033d3 	.word	0x080033d3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80032e4:	f7ff faf2 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 80032e8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4619      	mov	r1, r3
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	f04f 0400 	mov.w	r4, #0
 80032fa:	0214      	lsls	r4, r2, #8
 80032fc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003300:	020b      	lsls	r3, r1, #8
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6852      	ldr	r2, [r2, #4]
 8003306:	0852      	lsrs	r2, r2, #1
 8003308:	4611      	mov	r1, r2
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	eb13 0b01 	adds.w	fp, r3, r1
 8003312:	eb44 0c02 	adc.w	ip, r4, r2
 8003316:	4658      	mov	r0, fp
 8003318:	4661      	mov	r1, ip
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f04f 0400 	mov.w	r4, #0
 8003322:	461a      	mov	r2, r3
 8003324:	4623      	mov	r3, r4
 8003326:	f7fc ff51 	bl	80001cc <__aeabi_uldivmod>
 800332a:	4603      	mov	r3, r0
 800332c:	460c      	mov	r4, r1
 800332e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003330:	e067      	b.n	8003402 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	f04f 0400 	mov.w	r4, #0
 800333c:	4910      	ldr	r1, [pc, #64]	; (8003380 <UART_SetConfig+0x31c>)
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	eb13 0b01 	adds.w	fp, r3, r1
 8003346:	eb44 0c02 	adc.w	ip, r4, r2
 800334a:	4658      	mov	r0, fp
 800334c:	4661      	mov	r1, ip
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	461a      	mov	r2, r3
 8003358:	4623      	mov	r3, r4
 800335a:	f7fc ff37 	bl	80001cc <__aeabi_uldivmod>
 800335e:	4603      	mov	r3, r0
 8003360:	460c      	mov	r4, r1
 8003362:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003364:	e04d      	b.n	8003402 <UART_SetConfig+0x39e>
 8003366:	bf00      	nop
 8003368:	efff69f3 	.word	0xefff69f3
 800336c:	40008000 	.word	0x40008000
 8003370:	40013800 	.word	0x40013800
 8003374:	40021000 	.word	0x40021000
 8003378:	40004400 	.word	0x40004400
 800337c:	00f42400 	.word	0x00f42400
 8003380:	f4240000 	.word	0xf4240000
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003384:	f7ff fa0c 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8003388:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4619      	mov	r1, r3
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	f04f 0400 	mov.w	r4, #0
 800339a:	0214      	lsls	r4, r2, #8
 800339c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80033a0:	020b      	lsls	r3, r1, #8
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6852      	ldr	r2, [r2, #4]
 80033a6:	0852      	lsrs	r2, r2, #1
 80033a8:	4611      	mov	r1, r2
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	eb13 0b01 	adds.w	fp, r3, r1
 80033b2:	eb44 0c02 	adc.w	ip, r4, r2
 80033b6:	4658      	mov	r0, fp
 80033b8:	4661      	mov	r1, ip
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f04f 0400 	mov.w	r4, #0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4623      	mov	r3, r4
 80033c6:	f7fc ff01 	bl	80001cc <__aeabi_uldivmod>
 80033ca:	4603      	mov	r3, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80033d0:	e017      	b.n	8003402 <UART_SetConfig+0x39e>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	f04f 0400 	mov.w	r4, #0
 80033dc:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80033e0:	f144 0100 	adc.w	r1, r4, #0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	461a      	mov	r2, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	f7fc feec 	bl	80001cc <__aeabi_uldivmod>
 80033f4:	4603      	mov	r3, r0
 80033f6:	460c      	mov	r4, r1
 80033f8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80033fa:	e002      	b.n	8003402 <UART_SetConfig+0x39e>
          default:
            ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	76fb      	strb	r3, [r7, #27]
            break;
 8003400:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003408:	d308      	bcc.n	800341c <UART_SetConfig+0x3b8>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003410:	d204      	bcs.n	800341c <UART_SetConfig+0x3b8>
        {
          huart->Instance->BRR = usartdiv;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	e0fd      	b.n	8003618 <UART_SetConfig+0x5b4>
        }
        else
        {
          ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	76fb      	strb	r3, [r7, #27]
 8003420:	e0fa      	b.n	8003618 <UART_SetConfig+0x5b4>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342a:	f040 8083 	bne.w	8003534 <UART_SetConfig+0x4d0>
  {
    switch (clocksource)
 800342e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003432:	2b08      	cmp	r3, #8
 8003434:	d85e      	bhi.n	80034f4 <UART_SetConfig+0x490>
 8003436:	a201      	add	r2, pc, #4	; (adr r2, 800343c <UART_SetConfig+0x3d8>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	08003461 	.word	0x08003461
 8003440:	08003481 	.word	0x08003481
 8003444:	080034a1 	.word	0x080034a1
 8003448:	080034f5 	.word	0x080034f5
 800344c:	080034bd 	.word	0x080034bd
 8003450:	080034f5 	.word	0x080034f5
 8003454:	080034f5 	.word	0x080034f5
 8003458:	080034f5 	.word	0x080034f5
 800345c:	080034dd 	.word	0x080034dd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003460:	f7ff fa34 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 8003464:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	005a      	lsls	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	441a      	add	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800347e:	e03c      	b.n	80034fa <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003480:	f7ff fa3a 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 8003484:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	005a      	lsls	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	441a      	add	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800349e:	e02c      	b.n	80034fa <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80034aa:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6852      	ldr	r2, [r2, #4]
 80034b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034ba:	e01e      	b.n	80034fa <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034bc:	f7ff f970 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 80034c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	005a      	lsls	r2, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	441a      	add	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034da:	e00e      	b.n	80034fa <UART_SetConfig+0x496>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	085b      	lsrs	r3, r3, #1
 80034e2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80034f2:	e002      	b.n	80034fa <UART_SetConfig+0x496>
      default:
        ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	76fb      	strb	r3, [r7, #27]
        break;
 80034f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	2b0f      	cmp	r3, #15
 80034fe:	d916      	bls.n	800352e <UART_SetConfig+0x4ca>
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003506:	d212      	bcs.n	800352e <UART_SetConfig+0x4ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	b29b      	uxth	r3, r3
 800350c:	f023 030f 	bic.w	r3, r3, #15
 8003510:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	b29b      	uxth	r3, r3
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	b29a      	uxth	r2, r3
 800351e:	89fb      	ldrh	r3, [r7, #14]
 8003520:	4313      	orrs	r3, r2
 8003522:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	89fa      	ldrh	r2, [r7, #14]
 800352a:	60da      	str	r2, [r3, #12]
 800352c:	e074      	b.n	8003618 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	76fb      	strb	r3, [r7, #27]
 8003532:	e071      	b.n	8003618 <UART_SetConfig+0x5b4>
    }
  }
  else
  {
    switch (clocksource)
 8003534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003538:	2b08      	cmp	r3, #8
 800353a:	d85c      	bhi.n	80035f6 <UART_SetConfig+0x592>
 800353c:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <UART_SetConfig+0x4e0>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	08003569 	.word	0x08003569
 8003548:	08003587 	.word	0x08003587
 800354c:	080035a5 	.word	0x080035a5
 8003550:	080035f7 	.word	0x080035f7
 8003554:	080035c1 	.word	0x080035c1
 8003558:	080035f7 	.word	0x080035f7
 800355c:	080035f7 	.word	0x080035f7
 8003560:	080035f7 	.word	0x080035f7
 8003564:	080035df 	.word	0x080035df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003568:	f7ff f9b0 	bl	80028cc <HAL_RCC_GetPCLK1Freq>
 800356c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	085a      	lsrs	r2, r3, #1
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	441a      	add	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	b29b      	uxth	r3, r3
 8003582:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003584:	e03a      	b.n	80035fc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003586:	f7ff f9b7 	bl	80028f8 <HAL_RCC_GetPCLK2Freq>
 800358a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	085a      	lsrs	r2, r3, #1
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	441a      	add	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	b29b      	uxth	r3, r3
 80035a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035a2:	e02b      	b.n	80035fc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80035ae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6852      	ldr	r2, [r2, #4]
 80035b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035be:	e01d      	b.n	80035fc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c0:	f7ff f8ee 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 80035c4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	085a      	lsrs	r2, r3, #1
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	441a      	add	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	b29b      	uxth	r3, r3
 80035da:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035dc:	e00e      	b.n	80035fc <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80035f4:	e002      	b.n	80035fc <UART_SetConfig+0x598>
      default:
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	76fb      	strb	r3, [r7, #27]
        break;
 80035fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	d908      	bls.n	8003614 <UART_SetConfig+0x5b0>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003608:	d204      	bcs.n	8003614 <UART_SetConfig+0x5b0>
    {
      huart->Instance->BRR = usartdiv;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	e001      	b.n	8003618 <UART_SetConfig+0x5b4>
    }
    else
    {
      ret = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003624:	7efb      	ldrb	r3, [r7, #27]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3728      	adds	r7, #40	; 0x28
 800362a:	46bd      	mov	sp, r7
 800362c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0310 	and.w	r3, r3, #16
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01a      	beq.n	8003746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800372e:	d10a      	bne.n	8003746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
  }
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af02      	add	r7, sp, #8
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003782:	f7fd fbfd 	bl	8000f80 <HAL_GetTick>
 8003786:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b08      	cmp	r3, #8
 8003794:	d10e      	bne.n	80037b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003796:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f82a 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e020      	b.n	80037f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d10e      	bne.n	80037e0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f814 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e00a      	b.n	80037f6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2220      	movs	r2, #32
 80037ea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380e:	e05d      	b.n	80038cc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d059      	beq.n	80038cc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003818:	f7fd fbb2 	bl	8000f80 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <UART_WaitOnFlagUntilTimeout+0x30>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11b      	bne.n	8003866 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800383c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e042      	b.n	80038ec <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d02b      	beq.n	80038cc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003882:	d123      	bne.n	80038cc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800388c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800389c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e00f      	b.n	80038ec <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	429a      	cmp	r2, r3
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d092      	beq.n	8003810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <__libc_init_array>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	4e0d      	ldr	r6, [pc, #52]	; (800392c <__libc_init_array+0x38>)
 80038f8:	4c0d      	ldr	r4, [pc, #52]	; (8003930 <__libc_init_array+0x3c>)
 80038fa:	1ba4      	subs	r4, r4, r6
 80038fc:	10a4      	asrs	r4, r4, #2
 80038fe:	2500      	movs	r5, #0
 8003900:	42a5      	cmp	r5, r4
 8003902:	d109      	bne.n	8003918 <__libc_init_array+0x24>
 8003904:	4e0b      	ldr	r6, [pc, #44]	; (8003934 <__libc_init_array+0x40>)
 8003906:	4c0c      	ldr	r4, [pc, #48]	; (8003938 <__libc_init_array+0x44>)
 8003908:	f000 f878 	bl	80039fc <_init>
 800390c:	1ba4      	subs	r4, r4, r6
 800390e:	10a4      	asrs	r4, r4, #2
 8003910:	2500      	movs	r5, #0
 8003912:	42a5      	cmp	r5, r4
 8003914:	d105      	bne.n	8003922 <__libc_init_array+0x2e>
 8003916:	bd70      	pop	{r4, r5, r6, pc}
 8003918:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800391c:	4798      	blx	r3
 800391e:	3501      	adds	r5, #1
 8003920:	e7ee      	b.n	8003900 <__libc_init_array+0xc>
 8003922:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003926:	4798      	blx	r3
 8003928:	3501      	adds	r5, #1
 800392a:	e7f2      	b.n	8003912 <__libc_init_array+0x1e>
 800392c:	080047e8 	.word	0x080047e8
 8003930:	080047e8 	.word	0x080047e8
 8003934:	080047e8 	.word	0x080047e8
 8003938:	080047ec 	.word	0x080047ec

0800393c <__itoa>:
 800393c:	1e93      	subs	r3, r2, #2
 800393e:	2b22      	cmp	r3, #34	; 0x22
 8003940:	b510      	push	{r4, lr}
 8003942:	460c      	mov	r4, r1
 8003944:	d904      	bls.n	8003950 <__itoa+0x14>
 8003946:	2300      	movs	r3, #0
 8003948:	700b      	strb	r3, [r1, #0]
 800394a:	461c      	mov	r4, r3
 800394c:	4620      	mov	r0, r4
 800394e:	bd10      	pop	{r4, pc}
 8003950:	2a0a      	cmp	r2, #10
 8003952:	d109      	bne.n	8003968 <__itoa+0x2c>
 8003954:	2800      	cmp	r0, #0
 8003956:	da07      	bge.n	8003968 <__itoa+0x2c>
 8003958:	232d      	movs	r3, #45	; 0x2d
 800395a:	700b      	strb	r3, [r1, #0]
 800395c:	4240      	negs	r0, r0
 800395e:	2101      	movs	r1, #1
 8003960:	4421      	add	r1, r4
 8003962:	f000 f80d 	bl	8003980 <__utoa>
 8003966:	e7f1      	b.n	800394c <__itoa+0x10>
 8003968:	2100      	movs	r1, #0
 800396a:	e7f9      	b.n	8003960 <__itoa+0x24>

0800396c <itoa>:
 800396c:	f7ff bfe6 	b.w	800393c <__itoa>

08003970 <memset>:
 8003970:	4402      	add	r2, r0
 8003972:	4603      	mov	r3, r0
 8003974:	4293      	cmp	r3, r2
 8003976:	d100      	bne.n	800397a <memset+0xa>
 8003978:	4770      	bx	lr
 800397a:	f803 1b01 	strb.w	r1, [r3], #1
 800397e:	e7f9      	b.n	8003974 <memset+0x4>

08003980 <__utoa>:
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <__utoa+0x78>)
 8003984:	b08b      	sub	sp, #44	; 0x2c
 8003986:	4605      	mov	r5, r0
 8003988:	460c      	mov	r4, r1
 800398a:	466e      	mov	r6, sp
 800398c:	f103 0c20 	add.w	ip, r3, #32
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	4637      	mov	r7, r6
 8003996:	c703      	stmia	r7!, {r0, r1}
 8003998:	3308      	adds	r3, #8
 800399a:	4563      	cmp	r3, ip
 800399c:	463e      	mov	r6, r7
 800399e:	d1f7      	bne.n	8003990 <__utoa+0x10>
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	791b      	ldrb	r3, [r3, #4]
 80039a4:	713b      	strb	r3, [r7, #4]
 80039a6:	1e93      	subs	r3, r2, #2
 80039a8:	2b22      	cmp	r3, #34	; 0x22
 80039aa:	6038      	str	r0, [r7, #0]
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	d904      	bls.n	80039bc <__utoa+0x3c>
 80039b2:	7023      	strb	r3, [r4, #0]
 80039b4:	461c      	mov	r4, r3
 80039b6:	4620      	mov	r0, r4
 80039b8:	b00b      	add	sp, #44	; 0x2c
 80039ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039bc:	1e66      	subs	r6, r4, #1
 80039be:	fbb5 f0f2 	udiv	r0, r5, r2
 80039c2:	af0a      	add	r7, sp, #40	; 0x28
 80039c4:	fb02 5510 	mls	r5, r2, r0, r5
 80039c8:	443d      	add	r5, r7
 80039ca:	1c59      	adds	r1, r3, #1
 80039cc:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80039d0:	f806 5f01 	strb.w	r5, [r6, #1]!
 80039d4:	4605      	mov	r5, r0
 80039d6:	b968      	cbnz	r0, 80039f4 <__utoa+0x74>
 80039d8:	5460      	strb	r0, [r4, r1]
 80039da:	4423      	add	r3, r4
 80039dc:	4622      	mov	r2, r4
 80039de:	1b19      	subs	r1, r3, r4
 80039e0:	1b10      	subs	r0, r2, r4
 80039e2:	4281      	cmp	r1, r0
 80039e4:	dde7      	ble.n	80039b6 <__utoa+0x36>
 80039e6:	7811      	ldrb	r1, [r2, #0]
 80039e8:	7818      	ldrb	r0, [r3, #0]
 80039ea:	f802 0b01 	strb.w	r0, [r2], #1
 80039ee:	f803 1901 	strb.w	r1, [r3], #-1
 80039f2:	e7f4      	b.n	80039de <__utoa+0x5e>
 80039f4:	460b      	mov	r3, r1
 80039f6:	e7e2      	b.n	80039be <__utoa+0x3e>
 80039f8:	080047b8 	.word	0x080047b8

080039fc <_init>:
 80039fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fe:	bf00      	nop
 8003a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a02:	bc08      	pop	{r3}
 8003a04:	469e      	mov	lr, r3
 8003a06:	4770      	bx	lr

08003a08 <_fini>:
 8003a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0a:	bf00      	nop
 8003a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0e:	bc08      	pop	{r3}
 8003a10:	469e      	mov	lr, r3
 8003a12:	4770      	bx	lr
